//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lithnet.Transforms.Presentation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Lithnet.Transforms.Presentation.strings", typeof(strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform converts the AD groupType attribute to the string description of the group scope. This transform will return either &quot;Global&quot;, &quot;DomainLocal&quot;, or &quot;Universal&quot;, depending on the presence of flags within the groupType attribute value.
        /// </summary>
        internal static string ADGroupScopeToStringTransformDescription {
            get {
                return ResourceManager.GetString("ADGroupScopeToStringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform converts the AD groupType attribute to the string description of the group type. This transform will return either &quot;Security&quot; or &quot;Distribution&quot;, depending on the presence of flags within the groupType attribute value.
        /// </summary>
        internal static string ADGroupTypeToStringTransformDescription {
            get {
                return ResourceManager.GetString("ADGroupTypeToStringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform tests for the presence of a flag within a bitmask and returns either &quot;True&quot; if the flag is set, or &quot;False&quot; if it is not.
        /// </summary>
        internal static string BitmaskToBooleanTransformDescription {
            get {
                return ResourceManager.GetString("BitmaskToBooleanTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform takes an incoming value and applies a flag based on the specified operator.
        ///
        ///Bitwise operator description:
        ///And - Tests the presence of the specified flag. If the flag is not set in the incoming value, the transform will always return zero. If the flag is set, the transform will return the flag value.
        ///
        ///Or - Sets the flag in the incoming value. If the flag is not set in the incoming value, the transform will set it. If it is already set, the transform makes no changes.
        ///
        ///Nand - Unsets the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BitmaskTransformDescription {
            get {
                return ResourceManager.GetString("BitmaskTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transform performs a logical operation on multiple boolean values.
        /// </summary>
        internal static string BooleanOperationTransformDescription {
            get {
                return ResourceManager.GetString("BooleanOperationTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform takes an incoming boolean value (true or false) and adds or removes the specified flag value from a bitmask. 
        ///
        ///This is a special type of transform known as a &apos;loop-back&apos; transform that reads in the target value of the transform in order to apply the appropriate value. If the target value is currently not present, then the default value is used.
        ///
        ///This transform is commonly used to set the &apos;account disabled&apos; flag in the AD userAccountControl attribute. You can specify a boolean input value  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BooleanToBitmaskTransformDescription {
            get {
                return ResourceManager.GetString("BooleanToBitmaskTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform joins multiple attribute values together, seperated by the specified delimiting text..
        /// </summary>
        internal static string ConcatStringTransformDescription {
            get {
                return ResourceManager.GetString("ConcatStringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform compares the incoming value with the target value, using the specified comparison method. If the values do not match, then the incoming value is used. If the values match, then no change is made to the target value. This can be used to prevent case changes from flowing to a target system.
        /// </summary>
        internal static string ConditionalStringFlowTransform {
            get {
                return ResourceManager.GetString("ConditionalStringFlowTransform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows custom C# code to be loaded to perform transformation of values.
        /// </summary>
        internal static string CSharpScriptTransformDescription {
            get {
                return ResourceManager.GetString("CSharpScriptTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows for conversion of dates between different formats, and optionally add or subtract time from the incoming date. The transform supports dates in .NET ticks, the FIM Service date format, or any custom date format supported by .NET date format strings.
        /// </summary>
        internal static string DateConverterTransformDescription {
            get {
                return ResourceManager.GetString("DateConverterTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows for the lookup of values in a delimted text file. The transform supports CSV and TSV files out of the box, but you can alternatively supply the transform with a custom delimiter to use to find the correct value. 
        ///
        ///Lookup transforms are used to find the incoming value in a table, and replace it with another value.
        ///
        ///If the incoming value is not found in the lookup table, you can specify what you want the transform to return instead. You can choose between returning nothing, returning [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DelimitedTextFileLookupTransformDescription {
            get {
                return ResourceManager.GetString("DelimitedTextFileLookupTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transform allows you to encode a binary value as a base-32 or base-64 string, or a string value as a ASCII or UTF binary value.
        /// </summary>
        internal static string EncodeStringTransformDescription {
            get {
                return ResourceManager.GetString("EncodeStringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to convert a number to a string in a predetermined format. Any .NET numeric format string is supported..
        /// </summary>
        internal static string FormatNumberTransformDescription {
            get {
                return ResourceManager.GetString("FormatNumberTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to insert attribute values into a string of text. Enclose a number inside braces (eg {0}, {1}) within the string to indicate where you want the values inserted. Attribute values are substituted in the order they appear to the transform..
        /// </summary>
        internal static string FormatStringTransformDescription {
            get {
                return ResourceManager.GetString("FormatStringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to extract a numbered component of a distinguished name. You can choose to return just the full RDN (the attribute/value pair in the format of &quot;CN=value&quot;) or just the value..
        /// </summary>
        internal static string GetDNComponentTransformDescription {
            get {
                return ResourceManager.GetString("GetDNComponentTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to pass in the text &quot;Security&quot; or &quot;Distribution&quot; and &quot;Global&quot;, &quot;Universal&quot;, or &quot;DomainLocal&quot;, and create an integer value suitable for passing directly to the AD groupType attribute.
        /// </summary>
        internal static string GroupStringToADGroupTypeTransformDescription {
            get {
                return ResourceManager.GetString("GroupStringToADGroupTypeTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transforms hashes a string, binary, or integer value.
        /// </summary>
        internal static string HashTransformDescription {
            get {
                return ResourceManager.GetString("HashTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transforms allows you to extract a single value from a multivalued attribute based on the criteria you specify.
        /// </summary>
        internal static string MultivalueToSingleValueTransformDescription {
            get {
                return ResourceManager.GetString("MultivalueToSingleValueTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform takes a chain of incoming boolean values and adds or removes the specific flag values from a bitmask.
        ///
        ///This is a special type of transform known as a &apos;loop-back&apos; transform that reads in the target value of the transform in order to apply the appropriate value. If the target value is currently not present, then the default value is used.
        ///
        ///This transform can be used to set multiple values in the AD userAccountControl attribute, by passing in several boolean values. You can specify multiple  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MVBooleanToBitmaskTransformDescription {
            get {
                return ResourceManager.GetString("MVBooleanToBitmaskTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transforms allows you to perform a mathematical operation on a value.
        /// </summary>
        internal static string NumberCalculationTransformDescription {
            get {
                return ResourceManager.GetString("NumberCalculationTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transform allows the use of a custom PowerShell script to transform values.
        /// </summary>
        internal static string PowerShellScriptPathTransformDescription {
            get {
                return ResourceManager.GetString("PowerShellScriptPathTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to apply a regular expression find-and-replace operation to an incoming string value.
        /// </summary>
        internal static string RegexReplaceTransformDescription {
            get {
                return ResourceManager.GetString("RegexReplaceTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform removes diacritical marks (accents, etc) from a string, returning the base character in its place.
        /// </summary>
        internal static string RemoveDiacriticsTransformDescription {
            get {
                return ResourceManager.GetString("RemoveDiacriticsTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to either
        ///1. Pass in a binary SID value, and receive a string-based SID
        ///2. Pass in a string-based SID, and receive a binary SID
        ///
        ///The transform automatically detects the type of incoming data (either a binary or string value) and applies the appropriate transformation to it.
        /// </summary>
        internal static string SidStringBiDirectionalTransformDesciption {
            get {
                return ResourceManager.GetString("SidStringBiDirectionalTransformDesciption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform takes a user SID, and extracts the Active Directory domain from it. You can choose to return the domain information either as 
        ///
        ///1. A binary SID value
        ///2. A string SID value
        ///3. The netBIOS name of the domain
        ///
        ///The transform can only return the netBIOS name of the domain, if that domain is known to the server where the transform is executing. If the domain cannot be resolved into a name, the string representation of the SID is returned.
        /// </summary>
        internal static string SidToDomainTransformDescription {
            get {
                return ResourceManager.GetString("SidToDomainTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows for the lookup of values in a simple two-column table, stored within the transform configuration itself. This type of lookup is idea for small lookup tables.
        ///
        ///Lookup transforms are used to find the incoming value in a table, and replace it with another value.
        ///
        ///If the incoming value is not found in the lookup table, you can specify what you want the transform to return instead. You can choose between returning nothing, returning the original value, or a fixed default value
        ///
        ///The tr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimpleLookupTransformDescription {
            get {
                return ResourceManager.GetString("SimpleLookupTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows converting a string to either upper, lower, or title case.
        /// </summary>
        internal static string StringCaseTransformDescription {
            get {
                return ResourceManager.GetString("StringCaseTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transforms allows you to escape invalid characters from an XML string, or an LDAP DN component&apos;s attribute value.
        /// </summary>
        internal static string StringEscapeTransformDescription {
            get {
                return ResourceManager.GetString("StringEscapeTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transforms splits a single-valued string using a regular expression into a multivalued string.
        /// </summary>
        internal static string StringSplitTransformDescription {
            get {
                return ResourceManager.GetString("StringSplitTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows extracting only certain characters from an incoming string value. The transform can perform extractions from either the left or the right hand side of the string, and supports padding the resulting string to meet a specified minimum character length.
        /// </summary>
        internal static string SubstringTransformDescription {
            get {
                return ResourceManager.GetString("SubstringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform removes leading and/or trailing spaces from a string.
        /// </summary>
        internal static string TrimStringTransformDescription {
            get {
                return ResourceManager.GetString("TrimStringTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transforms allows you to convert a value to a specified data type, provided the type conversion is valid..
        /// </summary>
        internal static string TypeConverterTransformDescription {
            get {
                return ResourceManager.GetString("TypeConverterTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows you to merge values into a single, compatible type, and removes any duplicate values from the merged list.
        /// </summary>
        internal static string ValueMergeTransformDescription {
            get {
                return ResourceManager.GetString("ValueMergeTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transform allows for the lookup of values in an XML file using an XPath expression.
        ///
        ///Lookup transforms are used to find the incoming value in a table, and replace it with another value.
        ///
        ///If the incoming value is not found in the lookup table, you can specify what you want the transform to return instead. You can choose between returning nothing, returning the original value, or a fixed default value
        ///
        ///The transform supports looking up string, integer, and binary values. Binary values need to be re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string XmlLookupTransformDescription {
            get {
                return ResourceManager.GetString("XmlLookupTransformDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transform allows for the extration of values from an XML blob using an XPath expression.
        /// </summary>
        internal static string XPathQueryTransformDescription {
            get {
                return ResourceManager.GetString("XPathQueryTransformDescription", resourceCulture);
            }
        }
    }
}
